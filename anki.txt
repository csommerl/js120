Object-Oriented Programming; a programming paradigm in which problems are dealt with in terms of objects, and objects are used to organize a program; js120

Two Advantages of OOP; 1. easy to reason about (through abstraction), 2. easy to maintain (to decrease the number of dependencies); js120

Two Disadvantages of OOP; 1. OOP programs are often larger, 2. OOP programs are often less efficient (more memory, storage, and processing); js120

Encapsulation; the bundling together into a single structure of two things: 1. data (state), 2. operations on that data (behavior); js120

Two purposes of encapsulation; 1. It ensures that you don't perform an operation suited for one type of data on another type of data for which it is unsuited, 2. It provides a public interface for interacting with objects, and it hides and restricts access to implementation details, thereby preventing objects from being changed through improper channels.; js120

Full Method Syntax; behavior: function() {...},; js120

Compact Method Syntax; behavior() {...},; js120

`this` keyword; can be used in place of the variable name within method definitions, and thereby the method definition will work as expected regardless of the variable name; js120

collaborator object or collaborator; an object that is a state of another object and the latter object has a method that depends on that state; js120

object type; what it shared in common with other objects; js120

factory function / object factory; a function that creates and returns an object, and thereby can be used to create multiple objects of the same type that share the same kinds of states & behaviors; js120

Three steps to making an object-oriented program; 1. Write a description of the problem, 2. Identify important nouns & verbs, 3. Organize nouns & verbs.; js120

Engine in OOP; what coordinates the objects & their control flow; js120

Class inheritance; refers to how child objects inherit common properties and methods from a parent type.; js120

Benefit of class inheritance; it helps one avoid unwieldy code when different children have behavior that differs depending on a property of that object type.; js120

What is a dependency?; This exists when some bit of code depends on some other bit of code.; js120

How does OOP reduce dependencies?; It confines them to exist within a single class/object.; js120

How is collaboration different from dependency?; With collaboration, one object instructs another object to do something without depending on anything concerning the implementation details within the latter object. In contrast, with a dependency, the former object would look within the latter object and operate directly on the implementation details.; js120

How to disable eslint for a particular line?; // eslint-disable-next-line error-abbreviation; eslint

Member access notation; dot notation syntax for accessing object properties, e.g., `obj.prop`; js120

Computed member access notation; bracket notation syntax for accessing object properties, e.g., `obj["prop"]`; js120

Two differences between computed and non-computed member access notation; 1) non-computed accepts only strings, whereas computed member access notation accepts expressions (which are evaluated and implicitly coerced to strings), and 2) non-computed accepts only strings that meet JavaScript's rules for valid variable names, whereas computed accepts any UTF-8 compatible string; js120

in operator; operator that returns true if the specified property is in the specified object or its prototype chain; js120

Difference between hasOwnProperty and in operator; The main difference between them is that `in` will also return `true` if the property is anywhere in the object's prototype chain, whereas `hasOwnProperty` will not look for the property within the prototype chain; js120

Object.getOwnPropertyNames(obj); returns an array of the names of obj's own properties; js120

Difference between Object.keys and Object.getOwnPropertyNames; The main difference between them is that `Object.keys` will get only the object's enumerable properties, whereas `Object.getOwnPropertyNames` will get all the object's properties (whether enumerable or not); js120

enumerable property; a property that will be visited by the most common iterative procedures performed upon objects, based on an intenal flag being set to true; js120

[[Prototype]]; an internal property (not directly accessible) of an object that contains a reference to the object's prototype; js120

Object.getPrototypeOf(obj); object function that returns an object's prototype object; js120

Object.setPrototypeOf(obj, newProtoObj); object function that sets the prototype of obj to newProtoObj; js120

Object.prototype.propertyIsEnumerable(prop); returns a boolean for whether an object's property is enumerable; js120

Object.prototype; All JavaScript objects (created by object literal syntax) inherit from this default prototype, which includes built-in properties; js120

__proto__; a deprecated, non-hidden (i.e., directly accessible) version of the [[Prototype]] property; js120

Object.prototype.isPrototypeOf(obj); returns a boolean representing whether the calling object is a prototype of obj; js120

clean or bare object; an object whose prototype is set to null and so does not have Object.prototype within its prototype chain; js120

How to test for whether an object has the usual built-in properties; use a guard clause with Object.getPrototypeOf(); js120

What are the 6 non-deprecated object instance methods?; hasOwnProperty, isPrototypeOf, propertyIsEnumerable, toLocaleString, toString, valueOf; js120

What makes a function definition a function declaration?; the function keyword is the very first thing on a line; js120

named function; a function whose definition consists of the function keyword followed by a progammer-defined name; js120

anonymous functions; a function that is not defined with the function keyword followed by a name; js120

two uses for naming a function defined by a function expression; 1. for debugging: the function name will be provided in the stack trace, and 2. for recursive functions: the function name will be accessible within the function body; js120

data type of functions; function data type, which is in fact a type of object (i.e., a complex data type that has both properties and methods); js120

isNaN(); function that, if necessary, coerces its argument to a number and then returns a boolean for whether the value is NaN; js120

Which is better to use Number.isNaN or isNaN?; use Number.isNaN; js120

What are undeclared variables relative to execution context?; they are properties of the global object; js120

execution context; the environment in which code is executed, and in JavaScript this consists in the current value of the this keyword; js120

JavaScript's rule for how execution context is determined/set; what matters is *how* a function/method is invoked, *not where or when* it is defined or invoked; js120

two ways that (execution) context is determined or set; explicit and implicit (when your code doesn't explicictly determine the context); js120

Binding or setting the binding of `this`; refers to determining or setting the execution context of `this` to a particular object for invoking a function/method; js120

implicit execution context for regular function execution; `this` refers to the global object (`global` in Node.js and `window` in the browser); js120

how does strict mode change implicit function execution context; the implicit function execution context becomes `undefined` instead of the global object; js120

implicit execution context for regular method execution; `this` refers to the object used to call the method; js120

Function.prototype.call(thisArg, arg1, ... argN); function method that takes an argument to bind this and additional arguments to pass as arguments to the calling function; js120

Function.prototype.apply(thisArg, argsArray); function method that takes an argument to bind this and an array whose elements are to be passed as arguments to the calling function; js120

Difference between the function methods call and apply?; apply takes an array for the elements to be passed as arguments to the calling function, whereas call takes the arguments themselves; js120

Function.prototype.bind(thisArg, arg1, ... argN); function method that returns a new function whose execution context is permanently set to the first argument; js120

context loss; in JavaScript, this occurs when the execution context is not what is intuitively expected; js120

The 3 ways context loss occurs; 1. when a method is copied from an object & used elsewhere (e.g., passed as an argument to a function), 2. when a function containing `this` is nested within an object's method, and, 3. when a function whose body refers to `this` is passed as an argument to another function; js120

lexical; refers to the structure of the surrounding code without regard to its execution state; js120

why not use an arrow function to define a method; the lexical context is that in which the object is created, not the object itself; js120

5 ways of dealing with context loss; 1. arrow function, 2. `call`/`apply`, 3. `thisArg` to pass context as argument, 4. `bind`, and, 5. outer variable `let self = this`.; js120

Difference between iterable and enumerable; the former term refers to values that can be iterated over, whereas the latter term refers to object properties that are included in standard iterative procedures over their objects; js120

Can an object in JavaScript not have an object prototype?; yes, an object can have its [[Prototype]] property set to null, but it an object prototype must itself be an object; js120

2 disadvantages of the factory object creation pattern; 1. Each object created has its own copy of all methods, straining memory, and, 2. Objects have no mark of the type of object they are; js120

new operator; creates an instance of an object type that has a constructor function; js120

constructor function; a (non-arrow function) function called after the use of the new keyword; js120

What JavaScript does when invoking a function as a constructor; 1. A new object is created. 2. The new object's prototype is set to the function prototype. 3. The execution context (the value of `this`) within the function is set to the new object. 4. The function is invoked (and thereby any properties and methods are added to the new object). 5. The new object is returned, unless the function explicitly returns a different object (and any other explicit return values are ignored).; js120

There are 3 kinds of functions cannot be constructors; 1. arrow functions, because they lack a `prototype` property, 2. concise methods (defined with concise syntax without the `function` keyword), and, 3. many built-in objects and methods.; js120

why arrow functions can't be constructors; they are ineligible because they lack a `prototype` property; js120

how explicit return values of constructor functions are handled; explicit return values that are primitive values are ignored, whereas those that are objects (including arrays) are returned instead of the constructed object; js120

How to handle constructor functions with many parameters; a good practice is to pass the function instead an `args` object whose property names match that of the object to be constructed; js120

An object created using a constructor function; an instance of the constructor function; js120

instanceof operator; returns a boolean for whether an object (the first operand) was created by a constructor (the second operand), or, more precisely, has in its prototype chain the `prototype` property of the constructor.; js120

implicit execution context for functions used as constructors; the new object created is the execution context; js120

function prototype; the object that the constructor uses as the object prototype for the objects it creates; js120

where the function prototype is stored; a constructor's `prototype` property; js120

constructor's prototype object; another name for the function prototype, i.e., the object that the constructor uses as the object prototype for the objects it creates; js120

(object) prototype; the object from which another object inherits properties & methods; js120

Object.prototype.constructor; object instance property that returns a reference to the constructor function that created the instance object; js120

syntax for adding a method to a function prototype; ConstructorName.prototype.methodName = function() {...}; js120

Do constructors inherit from the function prototype?; no, only a constructor's instances do; js120

When a constructor is called without `new`, what do the assignments of properties to `this` do?; without strict mode, they become undeclared variables, since they are assigned as properties to the global object; js120

What happens when a function prototype is reassigned?; Any instances created prior to that reassignment will still have as their prototype the original function prototype object, whereas any instances created after that reassignment will have as their prototype the new function prototype; js120

scope-safe constructor; a constructor that will return an instance of the constructor even if the `new` keyword is not used; js120

How to create a scope-safe constructor?; use a guard clause that checks whether the execution context of the constructor's body is an instance of the constructor, and if it isn't then return the result of calling the constructor with the `new` keyword; js120

instance; any object that is created by something that can create multiple objects of the same type, whether a constructor or a factory function; js120

instance property; a property that belongs to (is stored directly in) a specific instance of some type; js120

an object's instance methods; methods that are contained within an object's prototype chain; js120

static property; a property that is defined & directly accessed on the constructor (not on an instance or the function prototype); js120

syntax for adding a static property; ConstructorName.propName = val; js120

syntax for creating a static method to a constructor; ConstructorName.methodName = function() {...}; js120

syntax for creating a constructor; function Name(prop1, prop2) {this.prop1 = prop1; this.prop2 = prop2;} (no return statement necessary); js120

syntax for creating a new instance from a constructor; new ConstructorName(prop1, prop2); js120

How to get the name of an object's constructor?; obj.constructor.name (the constructor property references the constructor function, and the name property of that function returns the constructor's name); js120

Do instance objects have a prototype property?; no, they have [[Prototype]]/__proto__ and constructor properties; js120

What receives a prototype property?; all functions besides arrow functions; js120

Function.prototype.length; returns the number of parameters expected by the function; js120

Function.prototype.name; returns the function's name or 'anonymous'/''; js120

What is the constructor of a function prototype?; it is the constructor itself; js120

What is the type of Function.prototype?; it is a function, not an object; js120

An array-like object; any object that both has a `length` property and has some property keys that are non-negative integers; js120

Array.from; takes an array-like object and returns a new array whose length is the length property of the object and whose elements are those properties of the object whose keys are less than the length; js120

Date.prototype.toString; method that returns a string representing the date, interpreted into the local timezone; js120

Date.prototype.getDay; method that returns the day of the week for the calling `Date` according to the local time, where `0` represents Sunday; js120

2 kinds of strings in JavaScript; 1. string primitives, created with string-literal syntax (quotation marks or backticks), and 2. `String` objects, created with the `String` constructor; js120

What happens when you use the `String` constructor without the `new` keyword; a new string is returned (following, if necessary, a conversion of a non-string argument to a string), not an object; js120

What is the prototype of an instance of a constructor?; It is the prototype property of the constructor, not the constructor itself.; js120

Syntactic sugar; syntax that is designed to be easier to read or use; js120

class ConstructorName { constructor() {...} static StaticMethodName() {...} instanceMethodName() {...} }; syntax for class declaration; js120

let ConstructorName = class {...}; syntax for class expression; js120

What happens when the `new` keyword is not used to call a constructor defined by `class`; a TypeError is raised, unlike with the constructor pattern; js120

difference between class declarations & class expressions; There is no difference, unlike with function declarations & function expressions.; js120

first-class citizen; a value that is treated like any other value insofar as they can be assigned to a variable, can be passed as an argument to a function, and can be returned by a function.; js120

`constructor` method; a special method of a class for creating and initializing an object instance of that class; js120

What is returned by typeof Constructor?; "function"; js120

What are instance methods also called?; object methods; js120

static keyword; this keyword defines a static property or method within class, as well as static initialization blocks; js120

static initialization block; block containing statements to be evaluated during class initialization; js120

implicit execution context within static initialization blocks; this refers to the class/constructor; js120

When is a class initialized?; when the class is created (with a declaration or an expression); js120

Without using the `static` keyword, what is the difference between full and concise method syntax within classes?; full syntax creates the method within every instance, whereas concise syntax creates it only within the function prototype; js120

In what mode are class bodies executed?; they are always executed in strict mode, regardless whether the programmer explicitly sets strict mode; js120

How are class declarations (and expressions) hoisted?; Only their names are hoisted but not their values (unlike function declarations); js120

What happens when attempting to reassign the `prototype` object of a class?; Here, the `prototype` property is read only, with the following behavior: 1. In strict mode, attempting to reassign that property raises a `TypeError`, and 2. In sloppy mode, any attempt to reassign it silently fails.; js120

Objects Linking to Other Objects (OLOO) Pattern; a pattern for creating objects where properties common to all objects of the same type are extracted to a prototype object, from which objects of that type inherit those properties.; js120

How to avoid manually creating instance properties of objects created by OLOO?; The prototype can be given an `init` method whose parameters are the instance's property values and whose body sets the instance's properties to those values (and returns the instance object).; js120

What is the advantage of OLOO over the factory function pattern?; memory efficiency insofar as there is only one copy of instance methods within the prototype object, instead of each instance having its own copy; js120

What is the advantage of the factory function pattern over OLOO?; it creates objects with private state; js120

sub-type; a class that inherits from another class; js120

super-type; a class from which another class inherits; js120

How does a class inherit from another class?; the former's function prototype inherits from the latter's; js120

sub-type's `constructor` instance property; assigned to its super-type unless you use reassign the sub-type's function prototype to have a `constructor` property set to the subtype (`Subtype.prototype.constructor = Subtype`).; js120

How can a sub-type constructor reuse its super-type constructor's body; function instance methods such as `call` are used within the sub-type constructor's body; js120

...

class definition

  - difference between setting a sub-type's function prototype to an instance of a super-type (using `new`) versus a child of the super-type's function prototype object (using `Object.create`): former executes constructor body, latter doesn't.
  - classes are blueprints / instructions, whereas constructors (or their prototypes) are objects
  - difference between setting a sub-type's function prototype to an instance of a super-type (using `new`) versus a child of the super-type's function prototype object (using `Object.create`): former executes constructor body, latter doesn't.
