Object-Oriented Programming; a programming paradigm in which problems are dealt with in terms of objects, and objects are used to organize a program; js120

Two Advantages of OOP; 1. easy to reason about (through abstraction), 2. easy to maintain (to decrease the number of dependencies); js120

Two Disadvantages of OOP; 1. OOP programs are often larger, 2. OOP programs are often less efficient (more memory, storage, and processing); js120

Encapsulation; the bundling together into a single structure of two things: 1. data (state), 2. operations on that data (behavior); js120

Two purposes of encapsulation; 1. It ensures that you don't perform an operation suited for one type of data on another type of data for which it is unsuited, 2. It provides a public interface for interacting with objects, and it hides and restricts access to implementation details, thereby preventing objects from being changed through improper channels.; js120

Full Method Syntax; behavior: function() {...},; js120

Compact Method Syntax; behavior() {...},; js120

`this` keyword; can be used in place of the variable name within method definitions, and thereby the method definition will work as expected regardless of the variable name; js120

collaborator object or collaborator; an object that is a state of another object and the latter object has a method that depends on that state; js120

object type; what it shared in common with other objects; js120

factory function / object factory; a function that creates and returns an object, and thereby can be used to create multiple objects of the same type that share the same kinds of states & behaviors; js120

Three steps to making an object-oriented program; 1. Write a description of the problem, 2. Identify important nouns & verbs, 3. Organize nouns & verbs.; js120

Engine in OOP; what coordinates the objects & their control flow; js120

Class inheritance; refers to how child objects inherit common properties and methods from a parent type.; js120

Benefit of class inheritance; it helps one avoid unwieldy code when different children have behavior that differs depending on a property of that object type.; js120

What is a dependency?; This exists when some bit of code depends on some other bit of code.; js120

How does OOP reduce dependencies?; It confines them to exist within a single class/object.; js120

How is collaboration different from dependency?; With collaboration, one object instructs another object to do something without depending on anything concerning the implementation details within the latter object. In contrast, with a dependency, the former object would look within the latter object and operate directly on the implementation details.; js120

How to disable eslint for a particular line?; // eslint-disable-next-line error-abbreviation; eslint

Member access notation; dot notation syntax for accessing object properties, e.g., `obj.prop`; js120

Computed member access notation; bracket notation syntax for accessing object properties, e.g., `obj["prop"]`; js120

Two differences between computed and non-computed member access notation; 1) non-computed accepts only strings, whereas computed member access notation accepts expressions (which are evaluated and implicitly coerced to strings), and 2) non-computed accepts only strings that meet JavaScript's rules for valid variable names, whereas computed accepts any UTF-8 compatible string; js120

in operator; operator that returns true if the specified property is in the specified object or its prototype chain; js120

Difference between hasOwnProperty and in operator; The main difference between them is that `in` will also return `true` if the property is anywhere in the object's prototype chain, whereas `hasOwnProperty` will not look for the property within the prototype chain; js120

Object.getOwnPropertyNames(obj); returns an array of the names of obj's own properties; js120

Difference between Object.keys and Object.getOwnPropertyNames; The main difference between them is that `Object.keys` will get only the object's enumerable properties, whereas `Object.getOwnPropertyNames` will get all the object's properties (whether enumerable or not); js120

enumerable property; a property that will be visited by the most common iterative procedures performed upon objects, based on an intenal flag being set to true; js120

[[Prototype]]; an internal property (not directly accessible) of an object that contains a reference to the object's prototype; js120

Object.getPrototypeOf(obj); object function that returns an object's prototype object; js120

Object.setPrototypeOf(obj, newProtoObj); object function that sets the prototype of obj to newProtoObj; js120

Object.prototype.propertyIsEnumerable(prop); returns a boolean for whether an object's property is enumerable; js120

Object.prototype; All JavaScript objects (created by object literal syntax) inherit from this default prototype, which includes built-in properties; js120

__proto__; a deprecated, non-hidden (i.e., directly accessible) version of the [[Prototype]] property; js120

Object.prototype.isPrototypeOf(obj); returns a boolean representing whether the calling object is a prototype of obj; js120

clean or bare object; an object whose prototype is set to null and so does not have Object.prototype within its prototype chain; js120

How to test for whether an object has the usual built-in properties; use a guard clause with Object.getPrototypeOf(); js120

What are the 6 non-deprecated object instance methods?; hasOwnProperty, isPrototypeOf, propertyIsEnumerable, toLocaleString, toString, valueOf; js120

What makes a function definition a function declaration?; the function keyword is the very first thing on a line; js120

named function; a function whose definition consists of the function keyword followed by a progammer-defined name; js120

anonymous functions; a function that is not defined with the function keyword followed by a name; js120

two uses for naming a function defined by a function expression; 1. for debugging: the function name will be provided in the stack trace, and 2. for recursive functions: the function name will be accessible within the function body; js120

data type of functions; function data type, which is in fact a type of object (i.e., a complex data type that has both properties and methods); js120

isNaN(); function that, if necessary, coerces its argument to a number and then returns a boolean for whether the value is NaN; js120

Which is better to use Number.isNaN or isNaN?; use Number.isNaN; js120

implicit execution context; the global object in Node.js or the window object in the browser; js120

What are undeclared variables relative to execution context?; they are properties of the global object; js120
